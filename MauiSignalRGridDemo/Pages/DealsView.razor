@page "/dealsview"
@using Microsoft.AspNetCore.SignalR.Client
@using DemoSharedTypes
@using System.Collections.Concurrent
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h1>Deals</h1>

@if (deals == null)
{
    <h2>Loading...</h2>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Smart ID</th>
                <th>Trade Date</th>
                <th>Trader</th>
                <th>Product Type</th>
                <th>Transaction Type</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var deal in deals.OrderBy(d => !pinnedDeals.ContainsKey(d.SmartID!)))
        {
            var isPinned = pinnedDeals.ContainsKey(deal.SmartID!);
            <tr class="@GetUpdatedDealClass(deal)">
                <th>
                        @if (isPinned)
                    {
                        <span class="oi oi-pin" aria-hidden="true"></span>
                    }
                    @deal.SmartID!
                </th>
                <th>@deal.TradeDate</th>
                <th>@deal.Trader</th>
                <th>@deal.ProductType</th>
                <th>@deal.TransactionType</th>
                <th>@deal.Price!.Value.ToString("0.00")</th>
                <th>
                    <button @onclick="() => PinDeal(deal.SmartID!)">@(isPinned ? "Unpin" : "Pin")</button>
                    <button @onclick="() => ExecuteDeal(deal)">Execute</button>
                </th>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private HubConnection? hubConnection;
    private IList<DealInfo>? deals;
    ConcurrentDictionary<string, DateTimeOffset> updatedDeals = new();
    ConcurrentDictionary<string, object> pinnedDeals = new();
    System.Threading.Timer? updateTimer;

    private void PinDeal(string smartID)
    {
        if (pinnedDeals.TryGetValue(smartID, out var _))
        {
            pinnedDeals.TryRemove(smartID, out var _);
        }
        else
        {
            pinnedDeals.Remove(smartID, out var _);
        }
    }

    private async Task ExecuteDeal(DealInfo deal)
    {
        await Application.Current!.MainPage!.DisplayAlert(
            title: "Execute Deal",
            message: $"Executing {deal.TransactionType} transaction deal for {deal.SmartID}, @ {deal.Price!.Value.ToString("0.00")}",
            cancel: "OK");
    }

    private string? GetUpdatedDealClass(DealInfo deal)
    {
        // Show recent deal updates with a particular style
        if (updatedDeals.TryGetValue(deal.SmartID!, out var lastUpdated))
        {
            if ((DateTimeOffset.Now - lastUpdated) < TimeSpan.FromSeconds(2))
            {
                return "updatedDeal";
            }
        }
        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7155/dealshub")
            .Build();

        // Receive deal updates in real-time
        hubConnection.On<DealUpdate>("UpdateDeal", (updatedDeal) =>
        {
            var liveDeal = deals!.Single(d => d.SmartID == updatedDeal.SmartID);
            liveDeal.Price = updatedDeal.NewPrice;
            updatedDeals[updatedDeal.SmartID!] = DateTimeOffset.Now;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        // Get initial deal list
        deals = await hubConnection.InvokeAsync<IList<DealInfo>>("GetDeals");

        // Update deal list every 1sec to show which ones were recently updated
        updateTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(StateHasChanged);
        }, state: null, dueTime: 0, period: 1_000);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        if (updateTimer is not null)
        {
            await updateTimer.DisposeAsync();
        }
    }
}
